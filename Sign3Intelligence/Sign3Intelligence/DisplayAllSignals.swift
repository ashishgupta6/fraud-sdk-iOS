//
//  DisplayAllSignals.swift
//  Sign3Intelligence
//
//  Created by Ashish Gupta on 28/08/24.
//

import Foundation


struct DisplayAllSignals{
    
    static func displayAllSignals(_ deviceSignalsApiImpl: DeviceSignalsApiImpl,_ sign3IntelliegnceSdkApiImpl: Sign3IntelligenceSdkApiImpl){

        DispatchQueue.global().async {
            Task.detached{
                // Detectors
                let isVpnEnabled = await sign3IntelliegnceSdkApiImpl.isVpnDetected()
                let isSimulatorDetected = await sign3IntelliegnceSdkApiImpl.isSimulatorDetected()
                
                
                // Signals
                let deviceId = await deviceSignalsApiImpl.getiOSDeviceId()
                let cloudId = await deviceSignalsApiImpl.getCloudId()
                let appId = await deviceSignalsApiImpl.getApplicationId()
                let idfa = await deviceSignalsApiImpl.getIDFA()
                let idfv = await deviceSignalsApiImpl.getIDFV()
                let uuid = await deviceSignalsApiImpl.getUUID()
                let batteryStatus = await deviceSignalsApiImpl.getBatteryStatus()
                let batteryLavel = await deviceSignalsApiImpl.getBatteryLevel()
                let cpuCount = await deviceSignalsApiImpl.getCpuCount()
                let freeDiskSpace = await deviceSignalsApiImpl.getFreeDiskSpace()
                let totalDiskSpace = await deviceSignalsApiImpl.getTotalDiskSpace()
                let usedDiskSpace = await deviceSignalsApiImpl.getUsedDiskSpace()
                let deviceModel = await deviceSignalsApiImpl.getDeviceModel()
                let deviceName = await deviceSignalsApiImpl.getDeviceName()
                let ipAddress = await deviceSignalsApiImpl.getIPAddress()
                let displayScale = await deviceSignalsApiImpl.getDisplayScale()
                let displayWidth = await deviceSignalsApiImpl.getDisplayWidth()
                let displayHeight = await deviceSignalsApiImpl.getDisplayHeight()
                let timeZone = await deviceSignalsApiImpl.getTimeZone()
                let currentTime = await deviceSignalsApiImpl.getCurrentTime()
                let currentLocal = await deviceSignalsApiImpl.getCurrentLocal()
                let preferredLanguage = await deviceSignalsApiImpl.getPreferredLanguage()
                let sanboxPath = await deviceSignalsApiImpl.getSandboxPath()
                let mcc = await deviceSignalsApiImpl.getMobileCountryCode()
                let ncc = await deviceSignalsApiImpl.getNetworkCountryCode()
                let hostName = await deviceSignalsApiImpl.getHostName()
                let isiOSAppOnMac = await deviceSignalsApiImpl.isiOSAppOnMac()
                let orientation = await deviceSignalsApiImpl.getOrientation()
                let carrierName = await deviceSignalsApiImpl.getCarrierName()
                let networkType = await deviceSignalsApiImpl.getNetworkType()
                let systemUptime = await deviceSignalsApiImpl.getSystemUptime()
                let ramUses = await deviceSignalsApiImpl.getRAMUsage()
                let totalRamSize = await deviceSignalsApiImpl.getTotalRAMSize()
                let kernalVersion = await deviceSignalsApiImpl.getKernelVersion()
                let kernalOSVersion = await deviceSignalsApiImpl.getKernelOSVersion()
                let kernalOSRelase = await deviceSignalsApiImpl.getKernelOSRelease()
                let kernalOSType = await deviceSignalsApiImpl.getKernelOSType()
                let iOSVersion = await deviceSignalsApiImpl.getiOSVersion()
                let frameWorkVersion = await deviceSignalsApiImpl.getFrameworkVersion()
                let iOSAppVersion = await deviceSignalsApiImpl.getiOSAppVersion()
                let appName = await deviceSignalsApiImpl.getAppName()
                let appInstallTime = await deviceSignalsApiImpl.getAppInstallTime()
                let appUpdateTime = await deviceSignalsApiImpl.getAppUpdateTime()
                let appState = await deviceSignalsApiImpl.getAppState()
                let appBuildNumber = await deviceSignalsApiImpl.getAppBuildNumber()
                let frameworkBuildNumber = await deviceSignalsApiImpl.getFrameworkBuildNumber()
                let latLong = await deviceSignalsApiImpl.getLatLong()
                let isTelephonySupported = await deviceSignalsApiImpl.isTelephonySupported()
                let cameraList = await deviceSignalsApiImpl.getCameraList()
                let abiType = await deviceSignalsApiImpl.getAbiType()
                let ringToneSource = await deviceSignalsApiImpl.getRingtoneSource()
                let availableLocals = await deviceSignalsApiImpl.getAvailableLocales()
                let securityProvidersData = await deviceSignalsApiImpl.getSecurityProvidersData()
                let fingerPrintSensorStatus = await deviceSignalsApiImpl.getFingerPrintSensorStatus()
                let glesVersion = await deviceSignalsApiImpl.getGlesVersion()
                let developmentSettingsEnabled = await deviceSignalsApiImpl.isDevelopmentSettingsEnabled()
                let httpProxy = await deviceSignalsApiImpl.getHttpProxy()
                let accessibilitySettings = await deviceSignalsApiImpl.getAccessibilitySettings()
                let touchExplorationEnabled = await deviceSignalsApiImpl.isTouchExplorationEnabled()
                let alarmAlertPath = await deviceSignalsApiImpl.getAlarmAlertPath()
                let time12Or24 = await deviceSignalsApiImpl.getTime12Or24()
                let fontScale = await deviceSignalsApiImpl.getFontScale()
                let textAutoReplace = await deviceSignalsApiImpl.getTextAutoReplace()
                let textAutoPunctuate = await deviceSignalsApiImpl.getTextAutoPunctuate()
                let bootTime = await deviceSignalsApiImpl.getBootTime()
                let currentBrightness = await deviceSignalsApiImpl.getCurrentBrightness()
                let simInfoList = await deviceSignalsApiImpl.getSimInfoList()
                let defaultBrowser = await deviceSignalsApiImpl.getDefaultBrowser()
                let audioCurrentVolume = await deviceSignalsApiImpl.getAudioVolumeCurrent()
                let carrierCountry = await deviceSignalsApiImpl.getCarrierCountry()

                DispatchQueue.main.async {
                    Utils.showInfologs(tags: "Device ID", value: deviceId)
                    Utils.showInfologs(tags: "Cloud ID", value: cloudId)
                    Utils.showInfologs(tags: "Application ID", value: appId)
                    Utils.showInfologs(tags: "IDFA", value: idfa)
                    Utils.showInfologs(tags: "IDFV", value: idfv)
                    Utils.showInfologs(tags: "UUID", value: uuid)
                    Utils.showInfologs(tags: "Battery Status", value: batteryStatus)
                    Utils.showInfologs(tags: "Battery Level", value: String(batteryLavel))
                    Utils.showInfologs(tags: "Cpu Count", value: String(cpuCount))
                    Utils.showInfologs(tags: "Free Disk Space", value: freeDiskSpace)
                    Utils.showInfologs(tags: "Total Disk Space", value: totalDiskSpace)
                    Utils.showInfologs(tags: "Used Disk Space", value: usedDiskSpace)
                    Utils.showInfologs(tags: "Device Model", value: deviceModel)
                    Utils.showInfologs(tags: "Device Name", value: deviceName)
                    Utils.showInfologs(tags: "IP Address", value: ipAddress)
                    Utils.showInfologs(tags: "Display Scale", value: displayScale.description)
                    Utils.showInfologs(tags: "Display Width", value: displayWidth.description)
                    Utils.showInfologs(tags: "Display Height", value: displayHeight.description)
                    Utils.showInfologs(tags: "Time Zone", value: timeZone)
                    Utils.showInfologs(tags: "Current Time", value: currentTime)
                    Utils.showInfologs(tags: "Current Local", value: currentLocal)
                    Utils.showInfologs(tags: "Preferred Language", value: preferredLanguage)
                    Utils.showInfologs(tags: "Sandbox Path", value: sanboxPath)
                    Utils.showInfologs(tags: "Mobile Country Code", value: mcc.description)
                    Utils.showInfologs(tags: "Network Country Code", value: ncc.description)
                    Utils.showInfologs(tags: "Host Name", value: hostName)
                    Utils.showInfologs(tags: "Is iOS App On Mac", value: isiOSAppOnMac.description)
                    Utils.showInfologs(tags: "Orientation", value: orientation)
                    Utils.showInfologs(tags: "Carrier Name", value: carrierName)
                    Utils.showInfologs(tags: "Network Type", value: networkType)
                    Utils.showInfologs(tags: "System Uptime", value: systemUptime)
                    Utils.showInfologs(tags: "RAM Uses", value: ramUses)
                    Utils.showInfologs(tags: "Toatal RAM Size", value: totalRamSize)
                    Utils.showInfologs(tags: "Kernal Version", value: kernalVersion)
                    Utils.showInfologs(tags: "Kernal OS Version", value: kernalOSVersion)
                    Utils.showInfologs(tags: "Kernal OS Relase", value: kernalOSRelase)
                    Utils.showInfologs(tags: "Kernal OS Type", value: kernalOSType)
                    Utils.showInfologs(tags: "iOS Version", value: iOSVersion)
                    Utils.showInfologs(tags: "FrameWork Version", value: frameWorkVersion)
                    Utils.showInfologs(tags: "iOS APP Version", value: iOSAppVersion)
                    Utils.showInfologs(tags: "APP Name", value: appName)
                    Utils.showInfologs(tags: "APP Install Time", value: appInstallTime)
                    Utils.showInfologs(tags: "APP Update Time", value: appUpdateTime)
                    Utils.showInfologs(tags: "APP State", value: appState)
                    Utils.showInfologs(tags: "APP Build Number", value: appBuildNumber)
                    Utils.showInfologs(tags: "Framework Build Number", value: frameworkBuildNumber)
                    Utils.showInfologs(tags: "Latitude", value: latLong.latitude.description)
                    Utils.showInfologs(tags: "Longitude", value: latLong.longitude.description)
                    Utils.showInfologs(tags: "Telephony Supported", value: isTelephonySupported.description)
                    Utils.showInfologs(tags: "Camera List", value: cameraList.description)
                    Utils.showInfologs(tags: "Abi Type", value: abiType.description)
                    Utils.showInfologs(tags: "Ringtone Source", value: ringToneSource.description)
                    Utils.showInfologs(tags: "Available Locals", value: availableLocals.first?.description ?? "")
                    Utils.showInfologs(tags: "Security Providers Data", value: securityProvidersData.description)
                    Utils.showInfologs(tags: "FingerPrint Sensor Status", value: fingerPrintSensorStatus.description)
                    Utils.showInfologs(tags: "Gles Version", value: glesVersion)
                    Utils.showInfologs(tags: "Development Settings Enabled", value: developmentSettingsEnabled.description)
                    Utils.showInfologs(tags: "HTTP Proxy", value: httpProxy)
                    Utils.showInfologs(tags: "Accessibility Settings", value: accessibilitySettings.description)
                    Utils.showInfologs(tags: "Touch Exploration Enabled", value: touchExplorationEnabled.description)
                    Utils.showInfologs(tags: "Alarm Alert Path", value: alarmAlertPath.description)
                    Utils.showInfologs(tags: "Time 12Or24 Format", value: time12Or24.description)
                    Utils.showInfologs(tags: "Font Scale", value: fontScale.description)
                    Utils.showInfologs(tags: "TextAutoReplace", value: textAutoReplace.description)
                    Utils.showInfologs(tags: "TextAutoPunctuate", value: textAutoPunctuate.description)
                    Utils.showInfologs(tags: "Boot Time", value: bootTime.description)
                    Utils.showInfologs(tags: "Current Brightness", value: currentBrightness.description)
                    Utils.showInfologs(tags: "Sim Info List", value: simInfoList.description)
                    Utils.showInfologs(tags: "Default Browser", value: defaultBrowser.description)
                    Utils.showInfologs(tags: "Audio Current Volume", value: audioCurrentVolume.description)
                    Utils.showInfologs(tags: "Carrier Country", value: carrierCountry.description)
                    
                    
                    Utils.showInfologs(tags: "VPN Detector", value: isVpnEnabled.description)
                    Utils.showInfologs(tags: "Simulator Detector", value: isSimulatorDetected.description)


                }
            }
        }
    }
}
