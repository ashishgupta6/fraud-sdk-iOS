//
//  DisplayAllSignals.swift
//  Sign3Intelligence
//
//  Created by Ashish Gupta on 28/08/24.
//

import Foundation


internal struct DataCreationService{
    
    private static let deviceSignalsApi: DeviceSignalsApi = {
        return DeviceSignalsApiImpl()
    }()
    
    private static let sign3IntelliegnceSdkApiImpl: Sign3IntelligenceSdkApi = {
        return Sign3IntelligenceSdkApiImpl(deviceSignalsApi: deviceSignalsApi)
    }()
    
    internal static func displayAllSignals(){
        
        DispatchQueue.global().async {
            Task.detached{
                // Detectors
                let isVpnEnabled = await sign3IntelliegnceSdkApiImpl.isVpnDetected()
                let isSimulatorDetected = await sign3IntelliegnceSdkApiImpl.isSimulatorDetected()
                let isJainBrokenDetected = await sign3IntelliegnceSdkApiImpl.isJailBrokenDetected()
                let locationSpoffer = await sign3IntelliegnceSdkApiImpl.isMockLocation()
                let appTampering = await sign3IntelliegnceSdkApiImpl.isAppTampered()
                let proxyDetector = await sign3IntelliegnceSdkApiImpl.isProxyDetected()
                let hookingDetector = await sign3IntelliegnceSdkApiImpl.isHookingDetected()
                let mirroredScreen = await sign3IntelliegnceSdkApiImpl.isScreenBeingMirrored()
                
                
                // Signals
                let deviceId = await deviceSignalsApi.getiOSDeviceId()
                let cloudId = await deviceSignalsApi.getCloudId()
                let appId = await deviceSignalsApi.getApplicationId()
                let idfa = await deviceSignalsApi.getIDFA()
                let uuid = await deviceSignalsApi.getUUID()
                let batteryStatus = await deviceSignalsApi.getBatteryStatus()
                let batteryLavel = await deviceSignalsApi.getBatteryLevel()
                let cpuCount = await deviceSignalsApi.getCpuCount()
                let freeDiskSpace = await deviceSignalsApi.getFreeDiskSpace()
                let totalDiskSpace = await deviceSignalsApi.getTotalDiskSpace()
                let usedDiskSpace = await deviceSignalsApi.getUsedDiskSpace()
                let deviceModel = await deviceSignalsApi.getDeviceModel()
                let deviceName = await deviceSignalsApi.getDeviceName()
                let wifiIpAddress = await deviceSignalsApi.getWifiIPAddress()
                let displayScale = await deviceSignalsApi.getDisplayScale()
                let displayWidth = await deviceSignalsApi.getDisplayWidth()
                let displayHeight = await deviceSignalsApi.getDisplayHeight()
                let timeZone = await deviceSignalsApi.getTimeZone()
                let currentTime = await deviceSignalsApi.getCurrentTime()
                let currentLocal = await deviceSignalsApi.getCurrentLocal()
                let preferredLanguage = await deviceSignalsApi.getPreferredLanguage()
                let sanboxPath = await deviceSignalsApi.getSandboxPath()
                let mcc = await deviceSignalsApi.getMobileCountryCode()
                let ncc = await deviceSignalsApi.getNetworkCountryCode()
                let hostName = await deviceSignalsApi.getHostName()
                let isiOSAppOnMac = await deviceSignalsApi.isiOSAppOnMac()
                let orientation = await deviceSignalsApi.getOrientation()
                let carrierName = await deviceSignalsApi.getCarrierName()
                let networkType = await deviceSignalsApi.getNetworkType()
                let systemUptime = await deviceSignalsApi.getSystemUptime()
                let ramUses = await deviceSignalsApi.getRAMUsage()
                let totalRamSize = await deviceSignalsApi.getTotalRAMSize()
                let kernalVersion = await deviceSignalsApi.getKernelVersion()
                let kernalOSVersion = await deviceSignalsApi.getKernelOSVersion()
                let kernalOSRelase = await deviceSignalsApi.getKernelOSRelease()
                let kernalOSType = await deviceSignalsApi.getKernelOSType()
                let iOSVersion = await deviceSignalsApi.getiOSVersion()
                let frameWorkVersion = await deviceSignalsApi.getFrameworkVersion()
                let iOSAppVersion = await deviceSignalsApi.getiOSAppVersion()
                let appName = await deviceSignalsApi.getAppName()
                let appInstallTime = await deviceSignalsApi.getAppInstallTime()
                let appUpdateTime = await deviceSignalsApi.getAppUpdateTime()
                let appState = await deviceSignalsApi.getAppState()
                let appBuildNumber = await deviceSignalsApi.getAppBuildNumber()
                let frameworkBuildNumber = await deviceSignalsApi.getFrameworkBuildNumber()
                let location = await deviceSignalsApi.getLocation()
                let isTelephonySupported = await deviceSignalsApi.isTelephonySupported()
                let cameraList = await deviceSignalsApi.getCameraList()
                let abiType = await deviceSignalsApi.getAbiType()
                let ringToneSource = await deviceSignalsApi.getRingtoneSource()
                let availableLocals = await deviceSignalsApi.getAvailableLocales()
                let securityProvidersData = await deviceSignalsApi.getSecurityProvidersData()
                let fingerPrintSensorStatus = await deviceSignalsApi.getFingerPrintSensorStatus()
                let glesVersion = await deviceSignalsApi.getGlesVersion()
                let developmentSettingsEnabled = await deviceSignalsApi.isDevelopmentSettingsEnabled()
                let httpProxy = await deviceSignalsApi.getHttpProxy()
                let accessibilitySettings = await deviceSignalsApi.getAccessibilitySettings()
                let touchExplorationEnabled = await deviceSignalsApi.isTouchExplorationEnabled()
                let alarmAlertPath = await deviceSignalsApi.getAlarmAlertPath()
                let time12Or24 = await deviceSignalsApi.getTime12Or24()
                let fontScale = await deviceSignalsApi.getFontScale()
                let textAutoReplace = await deviceSignalsApi.getTextAutoReplace()
                let textAutoPunctuate = await deviceSignalsApi.getTextAutoPunctuate()
                let bootTime = await deviceSignalsApi.getBootTime()
                let currentBrightness = await deviceSignalsApi.getCurrentBrightness()
                let simInfoList = await deviceSignalsApi.getSimInfoList()
                let defaultBrowser = await deviceSignalsApi.getDefaultBrowser()
                let audioCurrentVolume = await deviceSignalsApi.getAudioVolumeCurrent()
                let carrierCountry = await deviceSignalsApi.getCarrierCountry()
                let debuggerEnabled = await deviceSignalsApi.isDebuggerEnabled()
                let checkBuildConfiguration = await deviceSignalsApi.checkBuildConfiguration()
                let cpuType = await deviceSignalsApi.getCPUType()
                let proximitySensor = await deviceSignalsApi.hasProximitySensor()
                let localizedModel = await deviceSignalsApi.getLocalizedModel()
                let systemName = await deviceSignalsApi.getSystemName()
                let macAddress = await deviceSignalsApi.getMacAddress()
                let iPhoneBluetoothMacAddress = await deviceSignalsApi.getIPhoneBluetoothMacAddress()
                let iPadBluetoothMacAddress = await deviceSignalsApi.getIPadBluetoothMacAddress()
                
                DispatchQueue.main.async {
                    Utils.showInfologs(tags: "Device ID", value: deviceId)
                    Utils.showInfologs(tags: "Cloud ID", value: cloudId)
                    Utils.showInfologs(tags: "Application ID", value: appId)
                    Utils.showInfologs(tags: "IDFA", value: idfa)
                    Utils.showInfologs(tags: "UUID", value: uuid)
                    Utils.showInfologs(tags: "Battery Status", value: batteryStatus)
                    Utils.showInfologs(tags: "Battery Level", value: String(batteryLavel))
                    Utils.showInfologs(tags: "Cpu Count", value: String(cpuCount))
                    Utils.showInfologs(tags: "Free Disk Space", value: freeDiskSpace)
                    Utils.showInfologs(tags: "Total Disk Space", value: totalDiskSpace)
                    Utils.showInfologs(tags: "Used Disk Space", value: usedDiskSpace)
                    Utils.showInfologs(tags: "Device Model", value: deviceModel)
                    Utils.showInfologs(tags: "Device Name", value: deviceName)
                    Utils.showInfologs(tags: "Wifi IP Address", value: wifiIpAddress)
                    Utils.showInfologs(tags: "Display Scale", value: displayScale.description)
                    Utils.showInfologs(tags: "Display Width", value: displayWidth.description)
                    Utils.showInfologs(tags: "Display Height", value: displayHeight.description)
                    Utils.showInfologs(tags: "Time Zone", value: timeZone)
                    Utils.showInfologs(tags: "Current Time", value: Utils.dateToString(currentTime))
                    Utils.showInfologs(tags: "Current Local", value: currentLocal)
                    Utils.showInfologs(tags: "Preferred Language", value: preferredLanguage)
                    Utils.showInfologs(tags: "Sandbox Path", value: sanboxPath)
                    Utils.showInfologs(tags: "Mobile Country Code", value: mcc.description)
                    Utils.showInfologs(tags: "Network Country Code", value: ncc.description)
                    Utils.showInfologs(tags: "Host Name", value: hostName)
                    Utils.showInfologs(tags: "Is iOS App On Mac", value: isiOSAppOnMac.description)
                    Utils.showInfologs(tags: "Orientation", value: orientation)
                    Utils.showInfologs(tags: "Carrier Name", value: carrierName)
                    Utils.showInfologs(tags: "Network Type", value: networkType)
                    Utils.showInfologs(tags: "System Uptime", value: systemUptime)
                    Utils.showInfologs(tags: "RAM Uses", value: ramUses)
                    Utils.showInfologs(tags: "Toatal RAM Size", value: totalRamSize)
                    Utils.showInfologs(tags: "Kernal Version", value: kernalVersion)
                    Utils.showInfologs(tags: "Kernal OS Version", value: kernalOSVersion)
                    Utils.showInfologs(tags: "Kernal OS Relase", value: kernalOSRelase)
                    Utils.showInfologs(tags: "Kernal OS Type", value: kernalOSType)
                    Utils.showInfologs(tags: "iOS Version", value: iOSVersion)
                    Utils.showInfologs(tags: "FrameWork Version", value: frameWorkVersion)
                    Utils.showInfologs(tags: "iOS APP Version", value: iOSAppVersion)
                    Utils.showInfologs(tags: "APP Name", value: appName)
                    Utils.showInfologs(tags: "APP Install Time", value: Utils.dateToString(appInstallTime))
                    Utils.showInfologs(tags: "APP Update Time", value: Utils.dateToString(appUpdateTime))
                    Utils.showInfologs(tags: "APP State", value: appState)
                    Utils.showInfologs(tags: "APP Build Number", value: appBuildNumber)
                    Utils.showInfologs(tags: "Framework Build Number", value: frameworkBuildNumber)
                    Utils.showInfologs(tags: "Latitude", value: location.latitude.description)
                    Utils.showInfologs(tags: "Longitude", value: location.longitude.description)
                    Utils.showInfologs(tags: "Altitude", value: location.altitude.description)
                    Utils.showInfologs(tags: "TimeStamp", value: location.timeStamp.description)
                    Utils.showInfologs(tags: "Telephony Supported", value: isTelephonySupported.description)
                    Utils.showInfologs(tags: "Camera List", value: cameraList.description)
                    Utils.showInfologs(tags: "Abi Type", value: abiType.description)
                    Utils.showInfologs(tags: "Ringtone Source", value: ringToneSource.description)
                    Utils.showInfologs(tags: "Available Locals", value: availableLocals.first?.description ?? "")
                    Utils.showInfologs(tags: "Security Providers Data", value: securityProvidersData.description)
                    Utils.showInfologs(tags: "FingerPrint Sensor Status", value: fingerPrintSensorStatus.description)
                    Utils.showInfologs(tags: "Gles Version", value: glesVersion)
                    Utils.showInfologs(tags: "Development Settings Enabled", value: developmentSettingsEnabled.description)
                    Utils.showInfologs(tags: "HTTP Proxy", value: httpProxy)
                    Utils.showInfologs(tags: "Accessibility Settings", value: accessibilitySettings.description)
                    Utils.showInfologs(tags: "Touch Exploration Enabled", value: touchExplorationEnabled.description)
                    Utils.showInfologs(tags: "Alarm Alert Path", value: alarmAlertPath.description)
                    Utils.showInfologs(tags: "Time 12Or24 Format", value: time12Or24.description)
                    Utils.showInfologs(tags: "Font Scale", value: fontScale.description)
                    Utils.showInfologs(tags: "TextAutoReplace", value: textAutoReplace.description)
                    Utils.showInfologs(tags: "TextAutoPunctuate", value: textAutoPunctuate.description)
                    Utils.showInfologs(tags: "Boot Time", value: Utils.dateToString(bootTime))
                    Utils.showInfologs(tags: "Current Brightness", value: currentBrightness.description)
                    Utils.showInfologs(tags: "Sim Info List", value: simInfoList.description)
                    Utils.showInfologs(tags: "Default Browser", value: defaultBrowser.description)
                    Utils.showInfologs(tags: "Audio Current Volume", value: audioCurrentVolume.description)
                    Utils.showInfologs(tags: "Carrier Country", value: carrierCountry.description)
                    Utils.showInfologs(tags: "Debuger Enabled", value: debuggerEnabled.description)
                    Utils.showInfologs(tags: "Build Configuration", value: checkBuildConfiguration.description)
                    Utils.showInfologs(tags: "CPU Type", value: cpuType.description)
                    Utils.showInfologs(tags: "Proximity Sensor", value: proximitySensor.description)
                    Utils.showInfologs(tags: "Localized Model", value: localizedModel.description)
                    Utils.showInfologs(tags: "System Name", value: systemName.description)
                    Utils.showInfologs(tags: "MAC Address", value: macAddress.description)
                    Utils.showInfologs(tags: "iPhone Bluetooth Mac Address", value: iPhoneBluetoothMacAddress.description)
                    Utils.showInfologs(tags: "iPad Bluetooth Mac Address", value: iPadBluetoothMacAddress.description)
                    
                    Utils.showInfologs(tags: "VPN Detector", value: isVpnEnabled.description)
                    Utils.showInfologs(tags: "Simulator Detector", value: isSimulatorDetected.description)
                    Utils.showInfologs(tags: "JainBroken Detector", value: isJainBrokenDetected.description)
                    Utils.showInfologs(tags: "Location Spoffer", value: locationSpoffer.description)
                    Utils.showInfologs(tags: "App Tampering", value: appTampering.description)
                    Utils.showInfologs(tags: "Proxy Detector", value: proxyDetector.description)
                    Utils.showInfologs(tags: "Hooking Detector", value: hookingDetector.description)
                    Utils.showInfologs(tags: "Mirrored Screen", value: mirroredScreen.description)
                }
            }
        }
    }
}
